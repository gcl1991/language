1 方法签名
保证方法正交性，只有使用较频繁的才提供快捷方式方法

2 参数问题
(1) 公共方法需要检查参数有效性并抛出异常（包括构造方法）
(2) 非公共方法使用断言检查参数有效性(检查代价过高，可进行隐式检查)
(3) 审慎地使用可变参数,当不传递参数时候，空数组仍然存在，相当于默认参数为空数组,运行时会创建数组，存在性能问题
(4) 参数个数：拆分参数列表（方法拆分/内部类封装参数/构造着模式）
(5) 参数类型：参数类型优先选择接口和抽象类，与布尔型参数相比，优先使用两个元素枚举类型

3 返回值问题(缺失值建模)
(1) 不要返回null来代替空数组或集合。它使你的API更难以使用，更容易出错，且没有性能优势。
(2) Optional对缺失值进行建模，标识值可能为空，可读性更强，可代替部分受查异常
(3) Optional由对象创建和访问成本，存在性能问题。（用null和受查异常代替,Optional不用于包装类（双层包装问题））
(4) Optional一般用作返回值类型，不用于K/V（空值歧义）和不包装容器（空容器可自我表示缺失），实例属性慎用Optional

4 安全问题
(1) 如果一个类有从它的客户端获取或返回的可变组件，那么这个类必须防御性地拷贝这些组(注意clone和构造器参数检查顺序)
(2) 如果拷贝的成本太高，并且类信任它的客户端不会不适当地修改组件，则可以用文档替换防御性拷贝，该文档概述了客户端不得修改受影响组件的责任

5 重载问题
明智审慎地使用重载（避免重载和重写混淆，构造器无重载和重写混淆）
(1) 永远不要导出两个具有相同参数数量且参数协变的重载(避免混淆/依靠强制转换进行方法选择/方法签名不一致的重载是可以的),如果重载，那么应该确保在传递相同的参数时，所有重载的行为都是相同的。
(2) 注意自动装箱引起的重载set.remove()和list.remove()
(3) 不要在相同参数位置重载采用不同函数式接口的方法。 不同的函数式接口并没有根本不同。

6 文档
域注释：字段使用名字短语描述.
方法注释: 方法使用动词短语描述.
方法的文档注释应该简洁地描述方法与其客户端之间的契约: 前置条件+后置条件+副作用
@param paramS 解释参数的名词短语
@return 解释返回值的名字短语
@throws NullPointerException if 隐式描述前置条件(条件违反)

