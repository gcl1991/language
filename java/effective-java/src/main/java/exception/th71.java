package exception;

// 避免不必要的使用受检异常
public class th71 {
    // 优缺点：可控异常强迫程序员处理异常的条件，增强了可靠性，同时增加了负担，违反了开闭原则，特别在Stream中难以使用。
    //
    // 消除可控异常：
    // 1 返回所要的结果类型的一个零长度的 optional, 缺点是无法返回任何额外的信息来详细说明它无法执行你想要的计算。
    // 2 状态测试（先检查后执行）：缺点是并发环境慎用，性能太高慎用。itr.hasNext,itr.next
    //
    // 异常的选用：
    // 如果调用者无法恢复失败，就应该抛出未受检异常。
    // 如果可以恢复，并且想要迫使调用者处理异常的条件，首选应该返回一个optional值。
    // 当且仅当万一失败时，这些无法提供足够的信息，才应该抛出受检异常。
    // 优点：正确地使用API不能阻止这种异常条件的产生，并且一旦产生异常，使用API的程序员可以立即采取有用的动作，这种负担就被认为是正当的。
}
